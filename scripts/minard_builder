#!/usr/bin/env python
from __future__ import print_function
from subprocess import Popen, PIPE
import shlex
import atexit
from redis import Redis
import traceback

redis = Redis()

def tail_worker(user, host, ssh_key):
    cmd = 'ssh -i %s -o StrictHostKeyChecking=no -o ConnectTimeout=1 %s@%s tail_log_ssh data_temp' % (ssh_key,user,host)
    p = Popen(shlex.split(cmd), stdout=PIPE)

    while True:
        line = p.stdout.readline()

        i = redis.incr('builder/global:next')
        # expire after one hour
        expire = 60*60
        key = 'builder/id:{0:d}:msg'.format(i)
        redis.set(key,line)
        redis.expire(key,expire)

        if not line:
            break

    p.kill()
    p.wait()

def main(args):
    while True:
        try:
            tail_worker(args.ssh_user, args.host, args.ssh_key)
        except Exception as e:
            print(traceback.format_exc(),file=sys.stderr)
            print(e,file=sys.stderr)

        time.sleep(60)

if __name__ == '__main__':
    import argparse
    import time
    import sys
    import daemon
    from daemon.pidfile import PIDLockFile
    import os
    import pwd

    parser = argparse.ArgumentParser(description='Add builder log to redis database')
    parser.add_argument('--host', default='builder1.sp.snolab.ca')
    parser.add_argument('--ssh_user', default='snotdaq')
    parser.add_argument('ssh_key', help='path to builder ssh key')
    parser.add_argument('--pidfile', help='PID file in daemon mode')
    parser.add_argument('--logfile', help='log file in daemon mode')
    parser.add_argument('--user', default=None, help='run as [user] in daemon mode')
    parser.add_argument('-d', '--daemon', default=False, action='store_true')
    args = parser.parse_args()

    if args.user:
        uid = pwd.getpwnam(args.user).pw_uid
    else:
        uid = os.getuid()

    if args.daemon:
        if args.pidfile:
            pidfile = PIDLockFile(args.pidfile)
        else:
            pidfile = None

        if args.logfile:
            logfile = open(args.logfile,'w')
        else:
            logfile = None

        with daemon.DaemonContext(pidfile=pidfile,stderr=logfile,uid=uid):
            main(args)
    else:
        main(args)
