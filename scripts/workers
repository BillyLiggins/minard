#!/usr/bin/env python
from multiprocessing import Event, Process
import time
from minard.workers import tail_worker, orca_producer, orca_consumer, dispatch_worker
import atexit

if __name__ == '__main__':
    import optparse
    import os

    parser = optparse.OptionParser(description='Run background workers for SNO+ Monitoring')
    parser.add_option('--pidfile',dest='pidfile')
    options, args = parser.parse_args()

    if options.pidfile:
        with open(options.pidfile,'w') as f:
            f.write(str(os.getpid()))

    _stop = Event()

    processes = [Process(target=tail_worker,args=(_stop,)),
                 Process(target=orca_producer),
                 Process(target=orca_consumer,args=(5557,)),
                 Process(target=orca_consumer,args=(5557,)),
                 Process(target=orca_consumer,args=(5558,)),
                 Process(target=orca_consumer,args=(5558,)),
                 Process(target=dispatch_worker),
                 Process(target=dispatch_worker)]

    @atexit.register
    def stop():
        if options.pidfile:
            os.remove(options.pidfile)

        _stop.set()
        for process in processes:
            process.terminate()

    for process in processes:
        process.start()

    while True:
        for process in processes[:]:
            if not process.is_alive():
                processes.remove(process)
                p = Process(target=process._target,args=process._args)
                processes.append(p)
                p.start()

            time.sleep(60)
