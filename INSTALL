#!/usr/bin/env bash
set -e; sudo -v || exit

# apt-get install package dependencies (mostly ROOT)
if [ -f /etc/debian_version ]; then
   sudo apt-get install git dpkg-dev make g++ gcc binutils libx11-dev libxpm-dev \
       libxft-dev libxext-dev \
       gfortran libssl-dev libpcre3-dev \
       xlibmesa-glu-dev libglew1.5-dev libftgl-dev \
       libmysqlclient-dev libfftw3-dev cfitsio-dev \
       graphviz-dev libavahi-compat-libdnssd-dev \
       libldap2-dev python-dev libxml2-dev libkrb5-dev \
       libgsl0-dev libqt4-dev libfreetype6 libfreetype6-dev \
       curl libcurl3 bzip2 libbz2-1.0 scons
elif [ -f /etc/redhat-release ]; then
   sudo yum install git make gcc-c++ gcc binutils \
       libX11-devel libXpm-devel libXft-devel libXext-devel \
       gcc-gfortran openssl-devel pcre-devel \
       mesa-libGL-devel glew-devel ftgl-devel mysql-devel \
       fftw-devel cfitsio-devel graphviz-devel \
       avahi-compat-libdns_sd-devel libldap-dev python-devel \
       libxml2-devel gsl-static \
       curl curl-devel bzip2 bzip2-devel scons
else
    echo "Error! Couldn't determine Linux distribution!"
    echo "no /etc/debian_version or /etc/redhat-release file"
    exit 1
fi

if [ -d /usr/include/freetype2 ] && [ ! -d /usr/include/freetype ]; then
    # issue on Ubuntu 14.04
    # see http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18065 
    sudo ln -s /usr/include/freetype2 /usr/include/freetype
fi

add_service () {
    # adds an init script service to chkconfig or update-rc.d
    if [ -f /etc/debian_version ]; then
        sudo update-rc.d $1 defaults
    elif [ -f /etc/redhat-release ]; then
        sudo chkconfig --add $1
        sudo chkconfig --level 2345 $1 on
    else
        echo "Error! Couldn't determine Linux distribution!"
        echo "no /etc/debian_version or /etc/redhat-release file"
        exit 1
    fi
}
    
if ! hash /usr/local/bin/redis-server 2>/dev/null; then
    # install redis to /usr/local
    echo "Installing redis..."
    cd /usr/local
    sudo curl -O http://download.redis.io/redis-stable.tar.gz
    sudo tar -xzvf redis-stable.tar.gz
    cd redis-stable
    sudo make
    sudo make install
fi

# make directories for redis
# see "Installing Redis more properly" at http://redis.io/topics/quickstart
sudo mkdir -p /etc/redis /var/redis /opt/redis

# install redis init script
sudo curl -o /etc/init.d/redis_6379 \
https://raw.githubusercontent.com/tlatorre-uchicago/minard/master/init/redis_6379

# make it executable
sudo chmod +x /etc/init.d/redis_6379

# redis configuration file
# this is where, for example, the location of the backup image is configured
sudo curl -o /etc/redis/6379.conf \
https://raw.githubusercontent.com/tlatorre-uchicago/minard/master/etc/redis.conf

# add redis service and start it
add_service redis_6379
sudo /etc/init.d/redis_6379 start

if [ ! -d /opt/minard ]; then
    sudo mkdir /opt/minard
    sudo chown $USER /opt/minard
fi

if [ ! -f /opt/minard/bin/activate ]; then
    # create virtual environment
    virtualenv --no-site-packages /opt/minard
fi

cd /opt/minard
source bin/activate

pip install supervisor

if [ ! -d /opt/minard/src ]; then
    mkdir src
fi

if [ ! -d /opt/minard/src/minard ]; then
    echo "Installing minard..."
    cd $VIRTUAL_ENV/src
    git clone git@github.com:tlatorre-uchicago/minard.git
    pip install ./minard
    cd minard/doc
    make html
    cp -r _build/html /opt/minard/www/static/doc
    fi

# make sure www-data user exists
if ! id -u www-data 2>/dev/null; then
    echo "Adding www-data user..."
    sudo useradd -r www-data
fi

# make sure snoplusmon user exists
if ! id -u snoplusmon 2>/dev/null; then
    echo "Adding snoplusmon user..."
    sudo useradd -r snoplusmon
fi

# download gunicorn init script
sudo curl -o /etc/init.d/gunicorn \
https://raw.githubusercontent.com/tlatorre-uchicago/minard/master/init/gunicorn

# make it executable
sudo chmod +x /etc/init.d/gunicorn

# add and start gunicorn
add_service gunicorn
sudo /etc/init.d/gunicorn start

# create /etc/minard
sudo mkdir -p /etc/minard

cd $VIRTUAL_ENV/src/minard

if [ -f /etc/debian_version ]; then
    sudo cp init/supervisord_debian /etc/init.d/supervisord
elif [ -f /etc/redhat-release ]; then
    sudo cp init/supervisord_redhat /etc/init.d/supervisord
else
    echo "Error! Couldn't determine Linux distribution!"
    echo "no /etc/debian_version or /etc/redhat-release file"
    exit 1
fi

add_service supervisord

sudo cp etc/supervisord.conf /etc/supervisord.conf

if [ ! -d /opt/minard/src/root ]; then
    echo "Installing ROOT..."
    cd $VIRTUAL_ENV/src
    ROOT=root_v5.34.18
    curl -O ftp://root.cern.ch/root/$ROOT.source.tar.gz
    tar -xzvf $ROOT.source.tar.gz
    cd root
    ./configure --enable-minuit2 --enable-python
    make
    source bin/thisroot.sh
    cd ..
    echo "source $VIRTUAL_ENV/src/root/bin/thisroot.sh" >> $VIRTUAL_ENV/bin/activate
fi

if [ ! -d /opt/minard/src/geant4.9.5.p01 ]; then
    echo "Installing Geant4..."
    cd $VIRTUAL_ENV/src
    curl -O http://geant4.cern.ch/support/source/geant4.9.5.p01.tar.gz
    tar -xzvf geant4.9.5.p01.tar.gz
    mkdir geant4.9.5.p01-build
    cd geant4.9.5.p01-build
    cmake -DCMAKE_INSTALL_PREFIX=$VIRTUAL_ENV/src/geant4.9.5.p01 $VIRTUAL_ENV/src/geant4.9.5.p01
    make
    make install
    cd ..
    source geant4.9.5.p01/bin/geant4.sh
    echo "source $VIRTUAL_ENV/src/geant4.9.5.p01/bin/geant4.sh" >> $VIRTUAL_ENV/bin/activate
fi

if [ ! -d /opt/minard/src/rat ]; then
    echo "Installing RAT..."
    cd $VIRTUAL_ENV/src
    git clone git@github.com:snoplus/rat
    cd rat
    # need to go back to release 4.5.0
    git checkout 12c07de85f0f24b824ce2ff5c3ac4b193bea680d
    ./configure
    source env.sh
    scons
    cd ..
    echo "source $VIRTUAL_ENV/src/rat/env.sh" >> $VIRTUAL_ENV/bin/activate
fi

if [ ! -d /opt/minard/src/rat-tools ]; then
    echo "Installing rat-tools..."
    cd $VIRTUAL_ENV/src
    git clone git@github.com:snoplus/rat-tools.git
    cd rat-tools
    git checkout 27af7f240965c823816ed9bfb7fecdccb040a9ca
    cd ratzdab
    make
    source env.sh
    echo "source $VIRTUAL_ENV/src/rat-tools/ratzdab/env.sh" >> $VIRTUAL_ENV/bin/activate
fi

echo "done! Make sure to install the builder key at /etc/minard/id_rsa_builder "
echo "and the flask settings file at /etc/minard/settings.cfg"
